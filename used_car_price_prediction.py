# -*- coding: utf-8 -*-
"""Used Car Price Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Aa791qu870YkvAliuqlPfll3ZAcgLNR_
"""

import pandas as pd
import numpy as np

df=pd.read_csv("/content/car data_new.csv")
# df.rename(df,column={"Owner":"Past_Owners"},inplace=True)

df.columns

df.rename(columns={'Owner':"Past_Onwers"},inplace=True)
df.head()

df.isnull().any()

df.shape

df.info()

df.Past_Onwers.value_counts()

df1=df.copy()

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

# plt.hist(df[['Year','Selling_Price','Present_Price','Kms_Driven']],bins=50,figsize=(12,12))
hist_attr = df[['Year','Selling_Price','Kms_Driven','Present_Price']].hist(bins=50,figsize=(15,12))
hist_attr

df1["Car_Age"]=2019-df1['Year']

df1.drop(columns=['Year'])

df1.drop(columns=['Year'],inplace=True)
df1.drop(columns=['Car_Name'],inplace=True)

df1.shape

df1.head(3)

df1=pd.get_dummies(df1,columns=['Fuel_Type','Seller_Type','Transmission'])
df1

from sklearn.preprocessing import  StandardScaler,MinMaxScaler

from sklearn.model_selection import train_test_split

st=StandardScaler()

df2=st.fit_transform(df1)

df3=pd.DataFrame(st.fit_transform(df1))

df3.head()

df4=pd.DataFrame(st.transform(df1))
df4.head()

X=df1.drop(columns=['Selling_Price'])
Y=df1['Selling_Price']

X_train,X_test,y_train,y_test=train_test_split(X,Y,test_size=0.2)

std_sc=StandardScaler()

# df5=pd.DataFrame(std_sc.fit_transform())
standard_scaler=StandardScaler()
numerical_feauters=['Past_Onwers','Present_Price','Kms_Driven','Car_Age']
X_train_standardized=X_train.copy()
X_test_standardized = X_test.copy()

standard_scaler.fit(X_train[numerical_feauters])
X_train_standardized[numerical_feauters]=standard_scaler.transform(X_train_standardized[numerical_feauters])

X_test_standardized[numerical_feauters]=standard_scaler.transform(X_test_standardized[numerical_feauters])

from sklearn.linear_model import LinearRegression
from sklearn.metrics import  accuracy_score
import time

LR=LinearRegression()
LR.fit(X_train_standardized,y_train)

LR.score

from sklearn.model_selection import KFold
from sklearn.model_selection import cross_val_score,cross_val_predict
from sklearn.metrics import mean_absolute_error as MEA

kf=KFold(n_splits=5,random_state=42,shuffle=True)

R2_score_standardization=cross_val_score(LR,X_train_standardized, y_train, cv=kf)
y_predict_standardization = cross_val_predict(LR,X_train_standardized, y_train, cv=kf)
mea_standardization=MEA(y_train,y_predict_standardization)


print("The R2 Score are",R2_score_standardization)
print("The mean of R2 score is:"+str(R2_score_standardization.mean())+" with standard deviation of:",str(R2_score_standardization.std()))
print("\n")
print("The Mean absolute error is:",mea_standardization)

# R2_score_standardization

# mea_standardization

# y_predict_standardization

# LR.predict([[10.1,25000,0,1,0,1,0,1,0,5]])

from sklearn.preprocessing import MinMaxScaler

ms=MinMaxScaler(feature_range=(0,1))
scaled=ms.fit_transform(X)

Liner_regg=LinearRegression()

Liner_regg.fit(scaled,Y)

import pickle

pickle.dump(Liner_regg,open("ml_model.sav","wb"))
pickle.dump(scaled,open("scaler.sav","wb"))



